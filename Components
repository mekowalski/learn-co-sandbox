Components: modular, functional pieces that are reusable and present the code
-Help keep code organized and predictable, describing what should be rendered to DOM

Step 1: Write Components
  class Songs extends React.Component {
    render() {
      return (
        <div>
          <h1>Winning Streak</h1>
          <h1>Lonely Summer</h1>
          <h1>Inner Love</h1>
        </div>
      )
    }
  }
  
-New Class: Songs, is declared
-Class extends React's Component class, providing built in methods/attributes
-A render() method is defined, which returns what is explicitly provided, onto DOM

  class SongDetail extends React.Component {
    render() {
      return (
        <div>
          <p>Artist: Shaboozey</p>
          <p>Artist: Raleigh Ritchie</p>
          <p>Artist: Vincent Augustus</p>
        </div>
      )
    }
  }

  

Step 2: Use Components
-To present the Components above, another main Component will render them
-Every React application has top-level Component(s), most of the time, simply called App

  class App extends React.Component {
    render() {
      return (
        <div>
          <Song />
          <SongDetail />
        </div>
      )
    }
  }
  
-JSX(lines 43 & 44) is React's syntax of using HTML and JavaScript at the same time
-App Component will now render, onto DOM, the content of both Song and SongDetail Components
-App is the Parent Component and Song/SongDetail are the Children Components
  